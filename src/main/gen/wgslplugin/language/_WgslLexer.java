/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WGSLLexer.flex</tt>
 */
public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\1\1\3\22\0\1\1\1\70\1\0\1\22\1\0\1\73\1\72\1\0\1\35\1\36\1"+
    "\4\1\16\1\33\1\5\1\13\1\2\1\6\1\60\1\62\1\63\1\66\5\11\1\67\1\45\1\40\1\65"+
    "\1\41\1\0\1\46\4\10\1\15\1\10\11\24\1\21\12\24\1\32\1\0\1\34\1\75\1\23\1\0"+
    "\1\27\1\64\1\42\1\61\1\14\1\17\1\55\1\57\1\50\1\24\1\54\1\30\1\56\1\47\1\51"+
    "\1\20\1\24\1\26\1\31\1\25\1\12\1\52\1\53\1\7\1\37\1\24\1\43\1\74\1\44\1\71"+
    "\6\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\7\1\10\1\7\1\11\2\7\1\12\1\13"+
    "\5\7\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\7\1\23\1\24\1\25\1\26\6\7\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\0\1\6\1\0\1\42\2\0\1\43\1\44"+
    "\1\0\4\7\1\45\2\7\1\46\20\7\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\2\7\1\55\12\7\1\56"+
    "\1\57\1\60\1\61\1\40\1\62\1\0\1\6\1\0"+
    "\1\44\1\0\1\44\1\7\1\63\4\7\1\64\1\65"+
    "\1\7\1\66\7\7\1\67\7\7\1\70\1\7\1\71"+
    "\7\7\2\0\1\6\1\72\1\0\1\7\1\73\7\7"+
    "\1\74\1\75\3\7\1\76\4\7\1\77\1\7\1\100"+
    "\1\101\1\102\10\7\1\103\1\40\1\62\1\0\1\72"+
    "\4\7\1\104\5\7\1\105\13\7\1\106\1\7\1\72"+
    "\1\7\1\107\5\7\1\110\1\111\1\112\2\7\1\113"+
    "\2\7\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\124\3\7\1\125\3\7\1\126\1\7\1\127"+
    "\1\130\2\7\1\131\1\132\1\133\1\134\4\7\1\135"+
    "\15\7\1\136\5\7\1\137\1\7\1\140\1\141\1\7"+
    "\1\142\1\143\11\7\1\144\4\7\1\145\31\7\1\146"+
    "\1\147\12\7\1\150\1\151\1\152\1\153\1\7\1\154"+
    "\2\7\1\155\23\7\1\156\1\7\1\157\2\7\1\160"+
    "\1\161\5\7\1\162";

  private static int [] zzUnpackAction() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\76\0\370\0\u0136\0\u0174"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u0174\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\76"+
    "\0\u0516\0\76\0\76\0\u0554\0\u0592\0\u05d0\0\76\0\76"+
    "\0\76\0\76\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744"+
    "\0\u0782\0\76\0\u07c0\0\76\0\u07fe\0\76\0\u083c\0\76"+
    "\0\u087a\0\u08b8\0\76\0\u08f6\0\u0934\0\u022e\0\76\0\u0972"+
    "\0\u09b0\0\76\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\76\0\u0b62\0\u0ba0\0\u0174\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\76\0\76\0\76\0\76"+
    "\0\76\0\76\0\u0fbe\0\u0ffc\0\u0174\0\u103a\0\u1078\0\u10b6"+
    "\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\76"+
    "\0\76\0\76\0\76\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\76\0\u13dc\0\u141a\0\u1458\0\u0174\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u0174\0\u0174\0\u158e\0\u0174\0\u15cc\0\u160a\0\u1648"+
    "\0\u1686\0\u16c4\0\u1702\0\u1740\0\u0174\0\u177e\0\u17bc\0\u17fa"+
    "\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u0174\0\u1930\0\u0174\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u0174\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u0174\0\u0174\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u0174\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u0174\0\u1ff8"+
    "\0\u0174\0\u0174\0\u0174\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e"+
    "\0\u216c\0\u21aa\0\u21e8\0\u0174\0\76\0\76\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u0174\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\u0174\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8"+
    "\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u0174\0\u277a"+
    "\0\76\0\u27b8\0\u0174\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee"+
    "\0\u0174\0\u0174\0\u0174\0\u292c\0\u296a\0\u0174\0\u29a8\0\u29e6"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u2a24\0\u2a62\0\u2aa0\0\u0174\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u0174\0\u2b98\0\u0174\0\u2bd6\0\u2c14\0\u2c52\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u0174\0\u2d88"+
    "\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u0174\0\u30ae\0\u30ec\0\u312a"+
    "\0\u3168\0\u31a6\0\u0174\0\u31e4\0\u3222\0\u0174\0\u3260\0\u0174"+
    "\0\u0174\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412"+
    "\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u0174"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4"+
    "\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4"+
    "\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u0174\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46"+
    "\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u0174\0\u3eba\0\u0174"+
    "\0\u0174\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u0174\0\u3ff0\0\u402e"+
    "\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e"+
    "\0\u425c\0\u429a\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e"+
    "\0\u444c\0\u0174\0\u448a\0\u0174\0\u44c8\0\u4506\0\u0174\0\u0174"+
    "\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\10\1\15\1\16\1\17"+
    "\1\10\1\20\1\21\1\10\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\10\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\10\1\43"+
    "\1\10\1\44\1\45\2\10\1\46\1\10\1\11\1\47"+
    "\2\11\1\50\1\51\1\11\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\77\0\1\3\1\0\1\3\74\0"+
    "\1\61\1\0\1\62\76\0\1\63\1\64\2\0\1\65"+
    "\1\0\1\66\25\0\1\67\16\0\1\65\1\0\2\65"+
    "\2\0\1\65\15\0\1\70\1\71\1\0\1\70\1\72"+
    "\1\73\2\74\42\0\1\70\1\0\2\70\2\0\1\70"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\1\11\2\0\1\11\1\72\1\73\2\74\42\0"+
    "\1\11\1\0\2\11\2\0\1\11\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\75\13\10\1\76\1\10\1\0\1\10"+
    "\15\0\1\73\2\0\1\73\46\0\1\73\1\0\2\73"+
    "\2\0\1\73\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\5\10\1\77\1\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\100\15\10\1\0\1\10\25\0\1\101\65\0"+
    "\4\10\1\102\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\103\2\10\5\0\1\10\2\0\1\10\4\0\1\104"+
    "\1\10\1\105\11\10\1\106\1\10\1\0\1\10\15\0"+
    "\4\10\1\107\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\110\1\111\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\7\0\3\20\1\0\72\20\6\0"+
    "\5\10\1\0\1\112\1\10\1\0\3\10\1\0\3\10"+
    "\1\113\3\10\5\0\1\114\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\115\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\2\10\1\116\1\117\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\120\1\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\2\10\1\121\13\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\2\10\1\122\1\10\1\123\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\4\10\1\124\11\10\1\0\1\10\41\0"+
    "\1\125\77\0\1\126\101\0\1\127\24\0\1\130\51\0"+
    "\1\131\23\0\1\132\16\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\4\10\1\133\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\2\10\1\134\13\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\1\135\2\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\14\10\1\136\1\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\137\1\10\1\0"+
    "\3\10\1\0\4\10\1\140\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\2\10\1\141\13\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\4\10\1\142"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\1\143\1\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\1\10"+
    "\1\144\14\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\3\10\1\145\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\1\10\1\146\1\147\13\10\1\0"+
    "\1\10\74\0\1\150\75\0\1\151\102\0\1\152\77\0"+
    "\1\153\1\0\3\61\1\0\72\61\4\154\1\155\71\154"+
    "\6\0\1\70\1\156\1\0\1\70\1\0\1\73\2\74"+
    "\42\0\1\70\1\0\2\70\2\0\1\70\15\0\1\65"+
    "\2\0\1\65\1\0\1\73\2\74\42\0\1\65\1\0"+
    "\2\65\2\0\1\65\15\0\1\70\2\0\1\70\1\0"+
    "\1\73\2\74\42\0\1\70\1\0\2\70\2\0\1\70"+
    "\15\0\1\157\1\0\2\157\1\0\1\160\2\157\1\0"+
    "\1\157\7\0\1\157\12\0\1\157\15\0\5\157\1\0"+
    "\1\157\15\0\1\73\2\0\1\73\2\0\2\74\1\0"+
    "\1\161\40\0\1\73\1\0\2\73\2\0\1\73\14\0"+
    "\1\162\1\163\2\0\1\163\4\0\1\162\41\0\1\163"+
    "\1\0\2\163\2\0\1\163\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\10\1\164\14\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\13\10\1\165\2\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\6\10"+
    "\1\166\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\4\10\1\167\2\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\170\15\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\5\10\1\171\1\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\3\10\1\172\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\13\10\1\173\2\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\6\10\1\174\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\175\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\176\14\10\1\0\1\10\15\0"+
    "\1\10\1\177\3\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\4\10\1\200\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\1\10"+
    "\1\201\1\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\2\10\1\202\4\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\2\10\1\203\13\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\3\10"+
    "\1\204\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\2\10\1\205\4\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\2\10\1\206\13\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\3\10\1\207\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\210\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\7\10"+
    "\1\211\6\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\10\1\212\14\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\6\10\1\213\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\214\15\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\13\10\1\215\2\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\216\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\3\10\1\217\3\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\3\10\1\220\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\221\4\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\1\222\2\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\6\10\1\223\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\224\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\2\10\1\225\4\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\2\10\1\226\13\10\1\0\1\10\7\0"+
    "\4\154\1\227\71\154\4\155\1\230\71\155\6\0\1\231"+
    "\1\0\2\231\1\0\1\160\2\231\1\0\1\231\7\0"+
    "\1\231\12\0\1\231\15\0\5\231\1\0\1\231\15\0"+
    "\1\157\1\0\2\157\1\72\1\232\2\157\1\0\1\157"+
    "\2\233\5\0\1\157\12\0\1\157\15\0\5\157\1\0"+
    "\1\157\15\0\1\232\1\0\2\232\2\0\2\232\1\0"+
    "\1\232\7\0\1\232\12\0\1\232\15\0\5\232\1\0"+
    "\1\232\15\0\1\163\2\0\1\163\46\0\1\163\1\0"+
    "\2\163\2\0\1\163\15\0\1\163\2\0\1\163\5\0"+
    "\1\161\40\0\1\163\1\0\2\163\2\0\1\163\15\0"+
    "\5\10\1\0\2\10\1\0\1\234\2\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\235\1\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\15\10\1\236"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\237\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\5\10\1\240\1\241\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\10\10\1\242\5\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\3\10\1\243\12\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\244\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\245\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\1\246\1\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\4\10\1\247\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\7\10\1\250\6\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\4\10\1\251"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\1\10\1\252"+
    "\1\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\4\10\1\253\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\3\10\1\254\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\1\10\1\255\1\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\256\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\257\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\2\10\1\260\4\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\13\10\1\261\1\262\1\10\1\0\1\263"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\5\10\1\264\10\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\13\10"+
    "\1\265\1\266\1\10\1\0\1\267\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\4\10\1\270\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\271\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\4\10\1\272"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\273\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\274\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\7\0\2\154\1\275\1\154\1\227"+
    "\71\154\2\155\1\276\1\155\1\230\71\155\6\0\1\231"+
    "\1\0\2\231\1\0\1\232\2\231\1\0\1\231\2\233"+
    "\5\0\1\231\12\0\1\231\15\0\5\231\1\0\1\231"+
    "\15\0\1\232\1\0\2\232\2\0\2\232\1\0\1\232"+
    "\2\233\5\0\1\232\12\0\1\232\15\0\5\232\1\0"+
    "\1\232\14\0\1\277\1\300\2\0\1\300\4\0\1\277"+
    "\41\0\1\300\1\0\2\300\2\0\1\300\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\2\10\1\301\13\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\302\1\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\2\10\1\303\4\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\2\10\1\304\4\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\305\1\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\1\306\6\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\307\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\4\10\1\310\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\311\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\312\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\313\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\314\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\4\10\1\315"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\316\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\317\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\10\1\320\14\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\6\10\1\321\7\10\1\0\1\10\15\0"+
    "\1\10\1\322\3\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\1\10\1\323\3\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\1\10\1\324\3\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\4\10\1\325"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\4\10\1\326\2\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\5\10\1\327\10\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\4\10\1\330\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\1\300\2\0\1\300"+
    "\46\0\1\300\1\0\2\300\2\0\1\300\15\0\1\300"+
    "\2\0\1\300\5\0\1\331\40\0\1\300\1\0\2\300"+
    "\2\0\1\300\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\3\10\1\332\3\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\1\333"+
    "\1\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\334\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\10\10\1\335\5\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\336\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\2\10\1\337\4\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\340\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\341\15\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\342\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\343\4\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\6\10\1\344\7\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\345\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\10\10\1\346\5\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\347\15\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\3\10\1\350\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\13\10\1\351\1\352"+
    "\1\10\1\0\1\353\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\13\10\1\354\1\355\1\10\1\0\1\356\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\13\10\1\357\1\360\1\10\1\0"+
    "\1\361\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\362\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\363\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\6\10\1\364\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\7\10\1\365\6\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\366\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\3\10\1\367\3\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\2\10\1\370\13\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\371\1\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\1\372\1\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\373\1\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\3\10\1\374\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\4\10\1\375\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\2\10\1\376\13\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\377\4\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\12\10\1\u0100\3\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\2\10\1\u0101\4\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\u0102\15\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\2\10\1\u0103\13\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\u0104\15\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\1\u0105"+
    "\6\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\u0106\6\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\u0107\1\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\10\1\u0108\14\10\1\0\1\10\15\0\4\10\1\u0109"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\4\10"+
    "\1\u010a\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\6\10\1\u010b"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\6\10"+
    "\1\u010c\5\0\1\10\2\0\1\u010d\4\0\7\10\1\u010e"+
    "\1\10\1\u010f\1\u0110\1\u0111\1\u0112\1\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\u0113\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\1\u0114\15\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\1\10\1\u0115"+
    "\1\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\6\10\1\u0116\7\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\2\10\1\u0117\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\2\10\1\u0118"+
    "\4\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\4\10\1\u0119\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\4\10\1\u011a\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\12\10\1\u011b\3\10\1\0\1\10\15\0\5\10\1\0"+
    "\1\u011c\1\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\12\10\1\u011d\3\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\12\10\1\u011e\3\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\2\10"+
    "\1\u011f\13\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\6\10\1\u0120\7\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\10\10\1\u0121\5\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\u0122\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\2\10"+
    "\1\u0123\13\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\15\10\1\u0124\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\5\10\1\u0125\1\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\1\10\1\u0126\1\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\u0127\6\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\7\10"+
    "\1\u0128\6\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\u0129\15\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\3\10\1\u012a\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\1\u012b\1\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\u012c\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\2\10\1\u012d\4\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\4\10\1\u012e\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\1\10\1\u012f\1\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\u0130\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\4\10\1\u0131\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\u0132\6\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\u0133\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\10\10\1\u0134\5\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\3\10\1\u0135\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\4\10\1\u0136\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\6\10\1\u0137\7\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\4\10\1\u0138"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\6\10\1\u0139\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\u013a\6\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\u013b\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\3\10\1\u013c\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\1\u013d\1\10\1\0\3\10\1\0\7\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\3\10"+
    "\1\u013e\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\4\10\1\u013f\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\u0140"+
    "\4\0\7\10\1\u0141\3\10\1\u0142\2\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\u0143\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\1\10"+
    "\1\u0144\14\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\u0145\6\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\3\10\1\u0146\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\7\10\1\u0147\6\10\1\0"+
    "\1\10\15\0\4\10\1\u0148\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\4\10\1\u0149\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\12\10\1\u014a\3\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\u014b\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\6\10\1\u014c\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\11\10\1\u014d\1\10\1\u014e\1\u014f"+
    "\1\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\4\10\1\u0150\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\1\10\1\u0151\1\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\15\10\1\u0152\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\u0153\1\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\u0154\6\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\10\2\0\1\10\4\0"+
    "\2\10\1\u0155\13\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\12\10\1\u0156\3\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\12\10\1\u0157\3\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\5\0\1\10\2\0\1\10\4\0\12\10\1\u0158"+
    "\3\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\5\0\1\u0159\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\5\10\1\u015a\1\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\1\u015b\1\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\u015c\4\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\u015d\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\1\u015e"+
    "\15\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\u015f\6\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\1\u0160"+
    "\1\10\1\0\3\10\1\0\7\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\u0161\6\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\1\10\1\u0162\14\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\3\10"+
    "\1\u0163\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\4\10\1\u0164\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\12\10\1\u0165\3\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\4\10\1\u0166\2\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\6\10"+
    "\1\u0167\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\3\10\1\u0168\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\0\3\10\1\u0169\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\u016a\6\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\3\10\1\u016b\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\u016c\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\4\10\1\u016d\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\3\10\1\u016e\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\13\10\1\u016f\2\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\3\10"+
    "\1\u0170\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\7\10"+
    "\1\u0171\6\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\u0172\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\4\10\1\u0173\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\7\10\5\0\1\10"+
    "\2\0\1\10\4\0\12\10\1\u0174\3\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\0\4\10"+
    "\1\u0175\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\1\10"+
    "\1\u0176\1\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\u0177\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\u0178\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\5\10\1\u0179\1\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\u017a\1\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\0\7\10\5\0"+
    "\1\10\2\0\1\10\4\0\12\10\1\u017b\3\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\u017c\6\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\0\7\10\5\0\1\10\2\0\1\10\4\0\13\10"+
    "\1\u017d\2\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\5\0\1\10\2\0\1\10"+
    "\4\0\12\10\1\u017e\3\10\1\0\1\10\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\1\11\1\1\2\11"+
    "\3\1\4\11\7\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\0\1\1\1\0\1\11"+
    "\2\0\1\11\1\1\1\0\4\1\1\11\23\1\6\11"+
    "\15\1\4\11\2\1\1\0\1\1\1\0\1\11\1\0"+
    "\44\1\2\0\2\1\1\0\41\1\2\11\1\0\31\1"+
    "\1\11\245\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[382];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 115: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 116: break;
          case 3: 
            { return FORWARD_SLASH;
            } 
            // fall through
          case 117: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 118: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 119: break;
          case 6: 
            { return INT_LITERAL;
            } 
            // fall through
          case 120: break;
          case 7: 
            { return IDENT;
            } 
            // fall through
          case 121: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 122: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 123: break;
          case 10: 
            { return PREPROCESSOR_DECLARATION;
            } 
            // fall through
          case 124: break;
          case 11: 
            { return UNDERSCORE;
            } 
            // fall through
          case 125: break;
          case 12: 
            { return BRACKET_LEFT;
            } 
            // fall through
          case 126: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 127: break;
          case 14: 
            { return BRACKET_RIGHT;
            } 
            // fall through
          case 128: break;
          case 15: 
            { return PAREN_LEFT;
            } 
            // fall through
          case 129: break;
          case 16: 
            { return PAREN_RIGHT;
            } 
            // fall through
          case 130: break;
          case 17: 
            { return LESS_THAN;
            } 
            // fall through
          case 131: break;
          case 18: 
            { return GREATER_THAN;
            } 
            // fall through
          case 132: break;
          case 19: 
            { return BRACE_LEFT;
            } 
            // fall through
          case 133: break;
          case 20: 
            { return BRACE_RIGHT;
            } 
            // fall through
          case 134: break;
          case 21: 
            { return SEMICOLON;
            } 
            // fall through
          case 135: break;
          case 22: 
            { return AT;
            } 
            // fall through
          case 136: break;
          case 23: 
            { return EQUAL;
            } 
            // fall through
          case 137: break;
          case 24: 
            { return COLON;
            } 
            // fall through
          case 138: break;
          case 25: 
            { return BANG;
            } 
            // fall through
          case 139: break;
          case 26: 
            { return TILDE;
            } 
            // fall through
          case 140: break;
          case 27: 
            { return AND;
            } 
            // fall through
          case 141: break;
          case 28: 
            { return MODULO;
            } 
            // fall through
          case 142: break;
          case 29: 
            { return OR;
            } 
            // fall through
          case 143: break;
          case 30: 
            { return XOR;
            } 
            // fall through
          case 144: break;
          case 31: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 145: break;
          case 32: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 146: break;
          case 33: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 147: break;
          case 34: 
            { return ARROW;
            } 
            // fall through
          case 148: break;
          case 35: 
            { return UINT_LITERAL;
            } 
            // fall through
          case 149: break;
          case 36: 
            { return DECIMAL_FLOAT_LITERAL;
            } 
            // fall through
          case 150: break;
          case 37: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 151: break;
          case 38: 
            { return FN;
            } 
            // fall through
          case 152: break;
          case 39: 
            { return ATTR_LEFT;
            } 
            // fall through
          case 153: break;
          case 40: 
            { return ATTR_RIGHT;
            } 
            // fall through
          case 154: break;
          case 41: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 155: break;
          case 42: 
            { return LESS_THAN_EQUAL;
            } 
            // fall through
          case 156: break;
          case 43: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 157: break;
          case 44: 
            { return GREATER_THAN_EQUAL;
            } 
            // fall through
          case 158: break;
          case 45: 
            { return IF;
            } 
            // fall through
          case 159: break;
          case 46: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 160: break;
          case 47: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 161: break;
          case 48: 
            { return AND_AND;
            } 
            // fall through
          case 162: break;
          case 49: 
            { return OR_OR;
            } 
            // fall through
          case 163: break;
          case 50: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 164: break;
          case 51: 
            { return UINT32;
            } 
            // fall through
          case 165: break;
          case 52: 
            { return FOR;
            } 
            // fall through
          case 166: break;
          case 53: 
            { return FLOAT32;
            } 
            // fall through
          case 167: break;
          case 54: 
            { return POINTER;
            } 
            // fall through
          case 168: break;
          case 55: 
            { return LET;
            } 
            // fall through
          case 169: break;
          case 56: 
            { return INT32;
            } 
            // fall through
          case 170: break;
          case 57: 
            { return VAR;
            } 
            // fall through
          case 171: break;
          case 58: 
            { return HEX_FLOAT_LITERAL;
            } 
            // fall through
          case 172: break;
          case 59: 
            { return ELSE;
            } 
            // fall through
          case 173: break;
          case 60: 
            { return TRUE;
            } 
            // fall through
          case 174: break;
          case 61: 
            { return TYPE;
            } 
            // fall through
          case 175: break;
          case 62: 
            { return LOOP;
            } 
            // fall through
          case 176: break;
          case 63: 
            { return CASE;
            } 
            // fall through
          case 177: break;
          case 64: 
            { return VEC2;
            } 
            // fall through
          case 178: break;
          case 65: 
            { return VEC3;
            } 
            // fall through
          case 179: break;
          case 66: 
            { return VEC4;
            } 
            // fall through
          case 180: break;
          case 67: 
            { return BOOL;
            } 
            // fall through
          case 181: break;
          case 68: 
            { return FALSE;
            } 
            // fall through
          case 182: break;
          case 69: 
            { return ARRAY;
            } 
            // fall through
          case 183: break;
          case 70: 
            { return BREAK;
            } 
            // fall through
          case 184: break;
          case 71: 
            { return ENABLE;
            } 
            // fall through
          case 185: break;
          case 72: 
            { return RETURN;
            } 
            // fall through
          case 186: break;
          case 73: 
            { return ATOMIC;
            } 
            // fall through
          case 187: break;
          case 74: 
            { return STRUCT;
            } 
            // fall through
          case 188: break;
          case 75: 
            { return SWITCH;
            } 
            // fall through
          case 189: break;
          case 76: 
            { return MAT2X2;
            } 
            // fall through
          case 190: break;
          case 77: 
            { return MAT2X3;
            } 
            // fall through
          case 191: break;
          case 78: 
            { return MAT2X4;
            } 
            // fall through
          case 192: break;
          case 79: 
            { return MAT3X2;
            } 
            // fall through
          case 193: break;
          case 80: 
            { return MAT3X3;
            } 
            // fall through
          case 194: break;
          case 81: 
            { return MAT3X4;
            } 
            // fall through
          case 195: break;
          case 82: 
            { return MAT4X2;
            } 
            // fall through
          case 196: break;
          case 83: 
            { return MAT4X3;
            } 
            // fall through
          case 197: break;
          case 84: 
            { return MAT4X4;
            } 
            // fall through
          case 198: break;
          case 85: 
            { return UNIFORM;
            } 
            // fall through
          case 199: break;
          case 86: 
            { return PRIVATE;
            } 
            // fall through
          case 200: break;
          case 87: 
            { return STORAGE;
            } 
            // fall through
          case 201: break;
          case 88: 
            { return SAMPLER;
            } 
            // fall through
          case 202: break;
          case 89: 
            { return DEFAULT;
            } 
            // fall through
          case 203: break;
          case 90: 
            { return DISCARD;
            } 
            // fall through
          case 204: break;
          case 91: 
            { return BITCAST;
            } 
            // fall through
          case 205: break;
          case 92: 
            { return FUNCTION;
            } 
            // fall through
          case 206: break;
          case 93: 
            { return CONTINUE;
            } 
            // fall through
          case 207: break;
          case 94: 
            { return WORKGROUP;
            } 
            // fall through
          case 208: break;
          case 95: 
            { return TEXTURE_1D;
            } 
            // fall through
          case 209: break;
          case 96: 
            { return TEXTURE_2D;
            } 
            // fall through
          case 210: break;
          case 97: 
            { return TEXTURE_3D;
            } 
            // fall through
          case 211: break;
          case 98: 
            { return CONTINUING;
            } 
            // fall through
          case 212: break;
          case 99: 
            { return FALLTHROUGH;
            } 
            // fall through
          case 213: break;
          case 100: 
            { return TEXTURE_CUBE;
            } 
            // fall through
          case 214: break;
          case 101: 
            { return PUSH_CONSTANT;
            } 
            // fall through
          case 215: break;
          case 102: 
            { return TEXTURE_DEPTH_2D;
            } 
            // fall through
          case 216: break;
          case 103: 
            { return TEXTURE_2D_ARRAY;
            } 
            // fall through
          case 217: break;
          case 104: 
            { return TEXTURE_STORAGE_1D;
            } 
            // fall through
          case 218: break;
          case 105: 
            { return TEXTURE_STORAGE_2D;
            } 
            // fall through
          case 219: break;
          case 106: 
            { return TEXTURE_STORAGE_3D;
            } 
            // fall through
          case 220: break;
          case 107: 
            { return TEXTURE_CUBE_ARRAY;
            } 
            // fall through
          case 221: break;
          case 108: 
            { return TEXTURE_DEPTH_CUBE;
            } 
            // fall through
          case 222: break;
          case 109: 
            { return SAMPLER_COMPARISON;
            } 
            // fall through
          case 223: break;
          case 110: 
            { return TEXTURE_DEPTH_2D_ARRAY;
            } 
            // fall through
          case 224: break;
          case 111: 
            { return TEXTURE_MULTISAMPLED_2D;
            } 
            // fall through
          case 225: break;
          case 112: 
            { return TEXTURE_STORAGE_2D_ARRAY;
            } 
            // fall through
          case 226: break;
          case 113: 
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            } 
            // fall through
          case 227: break;
          case 114: 
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            } 
            // fall through
          case 228: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
