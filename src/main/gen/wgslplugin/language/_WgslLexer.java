/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WGSLLexer.flex</tt>
 */
public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\1\70\3\0\1\73\1\72\1\0\1\34\1\35\1\4\1\16\1"+
    "\32\1\5\1\13\1\3\1\6\1\56\1\57\1\60\1\66\1\11\1\64\1\11\1\63\1\11\1\67\1\44"+
    "\1\37\1\74\1\40\2\0\4\10\1\15\1\10\11\23\1\21\12\23\1\31\1\0\1\33\1\76\1\22"+
    "\1\0\1\26\1\61\1\41\1\45\1\14\1\17\1\54\1\62\1\47\1\23\1\53\1\27\1\55\1\50"+
    "\1\51\1\20\1\65\1\25\1\30\1\24\1\12\1\52\1\46\1\7\1\36\1\23\1\42\1\75\1\43"+
    "\1\71\6\0\1\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\7\1\10\1\7\1\11\2\7\1\12\5\7"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\7"+
    "\1\22\1\23\1\24\6\7\1\25\1\26\1\27\1\30"+
    "\1\31\1\1\1\32\1\33\1\34\1\35\1\0\1\6"+
    "\1\0\1\36\2\0\1\37\1\40\1\0\7\7\1\41"+
    "\22\7\1\42\1\43\1\44\1\45\1\46\1\47\6\7"+
    "\1\50\10\7\1\51\1\52\1\53\1\54\2\0\1\6"+
    "\1\0\1\40\1\0\1\40\7\7\1\55\21\7\1\56"+
    "\15\7\1\57\5\7\1\35\1\6\1\60\1\0\2\7"+
    "\1\61\10\7\1\62\1\63\1\7\1\64\24\7\1\65"+
    "\4\7\1\66\6\7\1\67\1\70\1\71\5\7\1\72"+
    "\1\7\1\0\1\60\2\7\1\73\2\7\1\74\40\7"+
    "\1\75\1\76\7\7\1\77\1\7\1\100\3\7\1\101"+
    "\2\7\1\60\1\102\7\7\1\103\27\7\1\104\1\7"+
    "\1\105\1\7\1\106\1\107\2\7\1\110\4\7\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\2\7\1\122\2\7\1\123\1\124\1\125\24\7\1\126"+
    "\1\7\1\127\1\7\1\130\1\7\1\131\1\132\1\7"+
    "\1\133\1\134\1\135\1\136\1\137\1\7\1\140\1\141"+
    "\1\7\1\142\1\7\1\143\4\7\1\144\1\7\1\145"+
    "\1\146\1\7\1\147\13\7\1\150\1\151\1\152\1\153"+
    "\1\7\1\154\15\7\1\155\1\156\6\7\1\157\1\7"+
    "\1\160\4\7\1\161\6\7\1\162\1\163\1\164\1\165"+
    "\1\7\1\166\1\7\1\167\1\170\1\7\1\171\1\172"+
    "\1\173\2\7\1\174\1\175\1\176\6\7\1\177\1\200"+
    "\5\7\1\201\3\7\1\202\1\7\1\203\31\7\1\204"+
    "\1\7\1\205\4\7\1\206\1\7\1\207\12\7\1\210"+
    "\1\211\1\212\1\213\1\214\3\7\1\215\22\7\1\216"+
    "\4\7\1\217\1\220\1\221\5\7\1\222";

  private static int [] zzUnpackAction() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\77\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\77\0\u04ec"+
    "\0\77\0\77\0\u052b\0\u056a\0\u05a9\0\77\0\77\0\77"+
    "\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723\0\77\0\u0762"+
    "\0\77\0\u07a1\0\77\0\u07e0\0\u081f\0\77\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u0237\0\77\0\u095a\0\u0999\0\77\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u017a\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81"+
    "\0\u0fc0\0\u0fff\0\u103e\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u017a"+
    "\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0"+
    "\0\77\0\77\0\77\0\77\0\u13ef\0\u142e\0\u146d\0\u14ac"+
    "\0\77\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u017a\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u017a\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\u017a\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\77\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u017a\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u017a"+
    "\0\u017a\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u017a"+
    "\0\u285c\0\u289b\0\u28da\0\u2919\0\u017a\0\u2958\0\u2997\0\u29d6"+
    "\0\u2a15\0\u2a54\0\u2a93\0\u017a\0\u017a\0\u017a\0\u2ad2\0\u2b11"+
    "\0\u2b50\0\u2b8f\0\u2bce\0\u017a\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca"+
    "\0\u2d09\0\u017a\0\u2d48\0\u2d87\0\u017a\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u017a\0\u017a\0\u35a6"+
    "\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u017a\0\u375f"+
    "\0\u017a\0\u379e\0\u37dd\0\u381c\0\u017a\0\u385b\0\u389a\0\77"+
    "\0\u017a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53"+
    "\0\u017a\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc"+
    "\0\u017a\0\u403b\0\u017a\0\u407a\0\u017a\0\u017a\0\u40b9\0\u40f8"+
    "\0\u017a\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u017a\0\u017a\0\u017a"+
    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u017a\0\u4233\0\u4272"+
    "\0\u017a\0\u42b1\0\u42f0\0\u017a\0\u017a\0\u017a\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u017a\0\u481b\0\u017a\0\u485a\0\u017a\0\u4899"+
    "\0\u017a\0\u017a\0\u48d8\0\u017a\0\u017a\0\u017a\0\u017a\0\u4917"+
    "\0\u4956\0\u017a\0\u017a\0\u4995\0\u017a\0\u49d4\0\u017a\0\u4a13"+
    "\0\u4a52\0\u4a91\0\u4ad0\0\u017a\0\u4b0f\0\u017a\0\u017a\0\u4b4e"+
    "\0\u017a\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07"+
    "\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u017a\0\u017a\0\u017a\0\u017a"+
    "\0\u4e42\0\u017a\0\u4e81\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u017a"+
    "\0\u017a\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u017a"+
    "\0\u532e\0\u017a\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u017a\0\u5469"+
    "\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u017a\0\u55e3\0\u017a"+
    "\0\u017a\0\u5622\0\u017a\0\u5661\0\u017a\0\u017a\0\u56a0\0\u017a"+
    "\0\u56df\0\u017a\0\u571e\0\u575d\0\u017a\0\u579c\0\u017a\0\u57db"+
    "\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u017a\0\u017a\0\u5955"+
    "\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf\0\u5b0e\0\u5b4d"+
    "\0\u017a\0\u5b8c\0\u017a\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7"+
    "\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41\0\u5e80\0\u5ebf"+
    "\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u60b7"+
    "\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u017a\0\u61f2\0\u017a\0\u6231"+
    "\0\u6270\0\u62af\0\u62ee\0\u632d\0\u636c\0\u017a\0\u63ab\0\u63ea"+
    "\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2"+
    "\0\u017a\0\u6621\0\u017a\0\u017a\0\u6660\0\u669f\0\u66de\0\u671d"+
    "\0\u017a\0\u675c\0\u679b\0\u67da\0\u6819\0\u6858\0\u6897\0\u68d6"+
    "\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50\0\u6a8f\0\u6ace"+
    "\0\u6b0d\0\u6b4c\0\u6b8b\0\u017a\0\u6bca\0\u6c09\0\u6c48\0\u6c87"+
    "\0\u017a\0\u017a\0\u017a\0\u6cc6\0\u6d05\0\u6d44\0\u6d83\0\u6dc2"+
    "\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\16\1\17\1\10"+
    "\1\20\1\10\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\10\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\2\10\1\44"+
    "\2\10\1\45\3\11\1\46\1\10\2\11\1\10\1\11"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\100\0\2\3\77\0\1\57\1\60\100\0\1\61\2\0"+
    "\1\62\1\0\1\63\24\0\1\64\15\0\3\62\2\0"+
    "\2\62\1\0\1\62\16\0\1\65\1\66\1\0\1\65"+
    "\1\67\1\70\2\71\40\0\3\65\2\0\2\65\1\0"+
    "\1\65\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\1\11\2\0"+
    "\1\11\1\67\1\70\2\71\40\0\3\11\2\0\2\11"+
    "\1\0\1\11\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\2\10\1\72\1\73"+
    "\16\10\16\0\1\70\2\0\1\70\44\0\3\70\2\0"+
    "\2\70\1\0\1\70\16\0\5\10\1\0\2\10\1\0"+
    "\10\10\1\74\1\10\5\0\1\10\2\0\1\10\3\0"+
    "\20\10\1\75\1\10\16\0\4\10\1\76\1\0\2\10"+
    "\1\0\7\10\1\77\1\100\1\10\5\0\1\10\2\0"+
    "\1\10\3\0\3\10\1\101\1\102\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\103\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\104\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\0\6\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\1\105"+
    "\1\10\1\0\6\10\1\106\3\10\5\0\1\107\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\1\110\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\7\10"+
    "\1\111\1\10\1\112\1\10\1\113\2\10\1\114\3\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\115\1\116"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\1\117\1\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\120\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\121\1\10\1\122\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\10\1\123\20\10"+
    "\41\0\1\124\100\0\1\125\102\0\1\126\34\0\1\127"+
    "\42\0\1\130\33\0\1\131\10\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\132\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\4\10\1\133\15\10\16\0\5\10\1\0\1\134"+
    "\1\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\2\10\1\135\17\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\136\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\4\10\1\137\15\10\16\0\5\10\1\0\2\10\1\0"+
    "\1\140\11\10\5\0\1\10\2\0\1\10\3\0\3\10"+
    "\1\141\16\10\16\0\5\10\1\0\1\142\1\10\1\0"+
    "\7\10\1\143\2\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\7\10\1\144"+
    "\2\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\145\3\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\146\1\10\1\147"+
    "\2\10\1\150\12\10\104\0\1\151\74\0\1\152\100\0"+
    "\1\153\77\0\1\154\1\0\2\57\1\0\74\57\4\60"+
    "\1\155\72\60\6\0\1\65\1\156\1\0\1\65\1\0"+
    "\1\70\2\71\40\0\3\65\2\0\2\65\1\0\1\65"+
    "\16\0\1\62\2\0\1\62\1\0\1\70\2\71\40\0"+
    "\3\62\2\0\2\62\1\0\1\62\16\0\1\65\2\0"+
    "\1\65\1\0\1\70\2\71\40\0\3\65\2\0\2\65"+
    "\1\0\1\65\16\0\1\157\1\0\2\157\1\0\1\160"+
    "\2\157\1\0\1\157\6\0\1\157\12\0\1\157\3\0"+
    "\1\157\10\0\4\157\1\0\2\157\1\0\1\157\16\0"+
    "\1\70\2\0\1\70\2\0\2\71\1\0\1\161\36\0"+
    "\3\70\2\0\2\70\1\0\1\70\15\0\1\162\1\163"+
    "\2\0\1\163\4\0\1\162\37\0\3\163\2\0\2\163"+
    "\1\0\1\163\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\164\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\165\17\10\16\0\5\10"+
    "\1\0\2\10\1\0\11\10\1\166\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\4\10\1\167\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\3\10\1\170\16\10\16\0\5\10"+
    "\1\0\2\10\1\0\10\10\1\171\1\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\172\15\10\16\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\173\3\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\174\17\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\2\10\1\175\17\10\16\0\1\10\1\176\3\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\4\10\1\177\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\1\10\1\200\10\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\201\1\10\1\202\2\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\11\10\1\203\1\10\1\204\1\205\1\10\1\206\3\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\17\10\1\207\2\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\12\10\1\210\7\10\16\0\4\10\1\211\1\0"+
    "\2\10\1\0\11\10\1\212\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\4\10\1\213\15\10"+
    "\16\0\5\10\1\0\2\10\1\0\6\10\1\214\3\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\215\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\216\15\10\16\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\217\3\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\220\15\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\221\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\222\17\10\16\0\5\10"+
    "\1\0\2\10\1\0\11\10\1\223\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\3\10\1\224"+
    "\16\10\16\0\5\10\1\0\2\10\1\0\1\225\11\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\11\10\1\226\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\227"+
    "\17\10\16\0\5\10\1\0\2\10\1\0\6\10\1\230"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\231\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\232\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\6\10\1\233"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\234\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\1\235\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\236\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\237\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\240\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\10\0\3\60\1\241\1\155"+
    "\72\60\6\0\1\242\1\0\2\242\1\0\1\160\2\242"+
    "\1\0\1\242\6\0\1\242\12\0\1\242\3\0\1\242"+
    "\10\0\4\242\1\0\2\242\1\0\1\242\16\0\1\157"+
    "\1\0\2\157\1\67\1\243\2\157\1\0\1\157\2\244"+
    "\4\0\1\157\12\0\1\157\3\0\1\157\10\0\4\157"+
    "\1\0\2\157\1\0\1\157\16\0\1\243\1\0\2\243"+
    "\2\0\2\243\1\0\1\243\6\0\1\243\12\0\1\243"+
    "\3\0\1\243\10\0\4\243\1\0\2\243\1\0\1\243"+
    "\16\0\1\163\2\0\1\163\44\0\3\163\2\0\2\163"+
    "\1\0\1\163\16\0\1\163\2\0\1\163\5\0\1\161"+
    "\36\0\3\163\2\0\2\163\1\0\1\163\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\245\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\1\246\11\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\1\247\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\250\2\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\251\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\10\10\1\252\1\253"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\254\2\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\5\10"+
    "\1\255\14\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\256\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\257\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\1\260\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\1\261\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\4\10\1\262\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\1\263\21\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\11\10\1\264\5\10"+
    "\1\265\2\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\12\10\1\266\7\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\267\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\11\10\1\270\10\10"+
    "\16\0\4\10\1\271\1\0\2\10\1\0\11\10\1\272"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\4\10"+
    "\1\273\1\0\2\10\1\0\1\274\10\10\1\275\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\4\10\1\276"+
    "\1\0\2\10\1\0\1\277\10\10\1\300\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\2\10"+
    "\1\301\1\302\16\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\303"+
    "\1\304\16\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\305\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\306\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\4\10\1\307\15\10"+
    "\16\0\5\10\1\0\2\10\1\0\1\10\1\310\10\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\4\10"+
    "\1\311\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\312\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\1\10\1\313"+
    "\10\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\314\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\1\315\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\316\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\317\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\320"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\321\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\6\10\1\322\13\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\13\10\1\323\6\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\12\10"+
    "\1\324\1\325\5\10\1\326\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\12\10"+
    "\1\327\1\330\5\10\1\331\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\332\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\333\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\10\10\1\334\1\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\335\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\1\242\1\0\2\242\1\0\1\243"+
    "\2\242\1\0\1\242\2\244\4\0\1\242\12\0\1\242"+
    "\3\0\1\242\10\0\4\242\1\0\2\242\1\0\1\242"+
    "\16\0\1\243\1\0\2\243\2\0\2\243\1\0\1\243"+
    "\2\244\4\0\1\243\12\0\1\243\3\0\1\243\10\0"+
    "\4\243\1\0\2\243\1\0\1\243\15\0\1\336\1\337"+
    "\2\0\1\337\4\0\1\336\37\0\3\337\2\0\2\337"+
    "\1\0\1\337\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\13\10\1\340\6\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\341\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\10\10\1\342\1\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\343\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\344\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\1\345\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\346\4\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\7\10\1\347\2\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\5\10\1\350"+
    "\4\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\4\10\1\351\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\6\10\1\352\3\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\353\6\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\14\10\1\354\5\10\16\0\4\10"+
    "\1\355\1\0\2\10\1\0\1\356\10\10\1\357\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\4\10\1\360"+
    "\1\0\2\10\1\0\1\361\10\10\1\362\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\11\10"+
    "\1\363\1\10\1\364\2\10\1\365\3\10\16\0\1\366"+
    "\4\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\367"+
    "\1\370\16\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\2\10\1\371\1\372"+
    "\16\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\373\17\10\16\0"+
    "\5\10\1\0\2\10\1\0\10\10\1\374\1\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\2\10\1\375\17\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\376"+
    "\17\10\16\0\5\10\1\0\2\10\1\0\10\10\1\377"+
    "\1\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\2\10\1\u0100\17\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\3\10\1\u0101\16\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\4\10\1\u0102"+
    "\15\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\u0103\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\4\10\1\u0104\15\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\2\10\1\u0105\17\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\u0106\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\1\10\1\u0107\20\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\u0108\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\7\10\1\u0109"+
    "\2\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\10\10\1\u010a\1\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\u010b\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\u010c\17\10\16\0"+
    "\4\10\1\u010d\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u010e\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\1\u010f\1\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\7\10\1\u0110\12\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\12\10\1\u0111\7\10\16\0\1\10\1\u0112\3\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\1\10\1\u0113\3\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\1\10\1\u0114\3\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\6\10\1\u0115\13\10\16\0\5\10\1\0\2\10\1\0"+
    "\7\10\1\u0116\2\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\16\10\1\u0117\3\10\16\0"+
    "\1\337\2\0\1\337\44\0\3\337\2\0\2\337\1\0"+
    "\1\337\16\0\1\337\2\0\1\337\5\0\1\u0118\36\0"+
    "\3\337\2\0\2\337\1\0\1\337\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\12\10\1\u0119\7\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\u011a\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\u011b\17\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\15\10\1\u011c\4\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\13\10\1\u011d\6\10\16\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\u011e\4\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\1\u011f\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u0120\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\3\10"+
    "\1\u0121\16\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\10\1\u0122\20\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\11\10\1\u0123\10\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\2\10\1\u0124\17\10\16\0\5\10\1\0\2\10"+
    "\1\0\10\10\1\u0125\1\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\2\10\1\u0126\17\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\u0127\17\10\16\0\5\10"+
    "\1\0\2\10\1\0\10\10\1\u0128\1\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\2\10"+
    "\1\u0129\17\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\17\10\1\u012a\2\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\12\10\1\u012b\7\10\16\0\4\10"+
    "\1\u012c\1\0\2\10\1\0\11\10\1\u012d\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u012e\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\u012f\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\u0130\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\3\10\1\u0131\16\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\u0132\15\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\u0133\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\u0134\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\3\10\1\u0135\16\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\3\10"+
    "\1\u0136\16\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\4\10\1\u0137\15\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\3\10\1\u0138\16\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\u0139\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\6\10\1\u013a\3\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u013b\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\6\10\1\u013c\3\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\u013d"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u013e\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\7\10\1\u013f\12\10\16\0\5\10"+
    "\1\0\1\u0140\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\15\10\1\u0141"+
    "\4\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\u0142\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\10\10\1\u0143\1\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u0144\3\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\u0145\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\12\10\1\u0146\1\u0147\5\10"+
    "\1\u0148\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\12\10\1\u0149\1\u014a\5\10"+
    "\1\u014b\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\12\10\1\u014c\1\u014d\5\10"+
    "\1\u014e\16\0\5\10\1\0\2\10\1\0\11\10\1\u014f"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\4\10"+
    "\1\u0150\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\10\10\1\u0151"+
    "\11\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\4\10\1\u0152\15\10\16\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u0153\3\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\12\10\1\u0154\7\10\16\0\5\10\1\0\1\u0155\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\6\10\1\u0156\3\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\1\u0157\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\u0158\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\1\u0159\4\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\3\10\1\u015a\16\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\u015b\15\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\u015c\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\3\10\1\u015d\16\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\4\10\1\u015e\15\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\3\10"+
    "\1\u015f\16\10\16\0\4\10\1\u0160\1\0\2\10\1\0"+
    "\1\u0161\10\10\1\u0162\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\4\10\1\u0163\1\0\2\10\1\0\1\u0164"+
    "\10\10\1\u0165\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\u0166\1\u0167\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\2\10\1\u0168\1\u0169\16\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\12\10\1\u016a\7\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\u016b\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\u016c\3\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\u016d\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u016e\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\u016f\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\u0170\2\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\u0171\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\u0172\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u0173\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u0174\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\10\10\1\u0175\11\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\10\10\1\u0176\11\10\16\0\5\10\1\0\1\u0177"+
    "\1\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\6\10\1\u0178"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\4\10\1\u0179\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\u017a\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\u017b\21\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\4\10\1\u017c\15\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u017d\4\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\3\10\1\u017e"+
    "\16\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\u017f\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\4\10\1\u0180\15\10\16\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\u0181\6\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\u0182"+
    "\17\10\16\0\5\10\1\0\2\10\1\0\1\u0183\11\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\u0184\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u0185\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u0186\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\u0187\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\u0188\2\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\u0189\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\2\10\1\u018a\17\10"+
    "\16\0\5\10\1\0\2\10\1\0\10\10\1\u018b\1\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\2\10\1\u018c\17\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\2\10"+
    "\1\u018d\17\10\16\0\5\10\1\0\2\10\1\0\10\10"+
    "\1\u018e\1\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\2\10\1\u018f\17\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\3\10\1\u0190\16\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\4\10"+
    "\1\u0191\15\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\3\10\1\u0192\16\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\u0193\15\10\16\0\4\10"+
    "\1\u0194\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\10\10\1\u0195"+
    "\11\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\10\10\1\u0196\11\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u0197\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u0198\4\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\u0199\6\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\1\u019a\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\2\10\1\u019b\17\10"+
    "\16\0\4\10\1\u019c\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\4\10\1\u019d\15\10\16\0\4\10\1\u019e\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\11\10\1\u019f\5\0"+
    "\1\10\2\0\1\u01a0\3\0\1\u01a1\7\10\1\u01a2\1\u01a3"+
    "\1\u01a4\1\u01a5\6\10\16\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\u01a6\4\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\10\10\1\u01a7"+
    "\1\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u01a8\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u01a9\4\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\3\10\1\u01aa"+
    "\16\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\4\10\1\u01ab\15\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\3\10\1\u01ac\16\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\3\10\1\u01ad\16\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\4\10\1\u01ae"+
    "\15\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\u01af\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u01b0\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u01b1\3\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\u01b2\4\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\6\10\1\u01b3"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\3\10\1\u01b4\16\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\u01b5\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\3\10\1\u01b6\16\10\16\0"+
    "\5\10\1\0\2\10\1\0\1\10\1\u01b7\10\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u01b8\3\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\7\10\1\u01b9"+
    "\12\10\16\0\5\10\1\0\2\10\1\0\5\10\1\u01ba"+
    "\4\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\4\10\1\u01bb\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\1\u01bc"+
    "\1\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\4\10\1\u01bd\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\1\u01be\21\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\1\u01bf\21\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\1\u01c0\21\10\16\0\5\10\1\0"+
    "\1\u01c1\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\4\10\1\u01c2\15\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\u01c3\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\u01c4\2\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\u01c5\4\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u01c6\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\u01c7\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\u01c8\4\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\10\10"+
    "\1\u01c9\11\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\u01ca\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\4\10\1\u01cb\15\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\4\10\1\u01cc\15\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\7\10"+
    "\1\u01cd\12\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\u01ce\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\15\10\1\u01cf\4\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\4\10\1\u01d0\15\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\14\10"+
    "\1\u01d1\5\10\16\0\5\10\1\0\2\10\1\0\1\10"+
    "\1\u01d2\10\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\10\10\1\u01d3\1\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\u01d4\6\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u01d5\2\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\u01d6\4\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\5\10\1\u01d7\4\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\u01d8\6\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\6\10\1\u01d9\3\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\u01da\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\3\10\1\u01db\6\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u01dc\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\1\u01dd"+
    "\1\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\5\10\1\u01de"+
    "\4\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u01df\4\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\7\10\1\u01e0\2\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\u01e1\4\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\11\10\1\u01e2"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\10\10\1\u01e3\11\10\16\0\5\10\1\0\2\10"+
    "\1\0\1\10\1\u01e4\10\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\11\10"+
    "\1\u01e5\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u01e6\2\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\u01e7\6\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\15\10\1\u01e8"+
    "\4\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\u01e9\17\10\16\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u01ea\3\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u01eb\3\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\7\10\1\u01ec\2\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\6\10\1\u01ed"+
    "\3\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\7\10\1\u01ee\12\10\16\0\5\10\1\0"+
    "\2\10\1\0\7\10\1\u01ef\2\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\u01f0\6\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\11\10\1\u01f1"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u01f2\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\7\10"+
    "\1\u01f3\12\10\16\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\u01f4\3\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\7\10\1\u01f5\12\10\16\0\5\10"+
    "\1\0\1\u01f6\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\u01f7\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\u01f8\3\0\10\10\1\u01f9\1\10\1\u01fa"+
    "\7\10\16\0\5\10\1\0\2\10\1\0\7\10\1\u01fb"+
    "\2\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u01fc\2\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\14\10\1\u01fd\5\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\2\10\1\u01fe"+
    "\17\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\14\10\1\u01ff\5\10\16\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u0200\6\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u0201\3\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\4\10\1\u0202\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\4\10\1\u0203\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\1\u0204\21\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\10\10\1\u0205\11\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\u0206"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\11\10\1\u0207\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\11\10\1\u0208\1\u0209\1\u020a"+
    "\6\10\16\0\5\10\1\0\2\10\1\0\7\10\1\u020b"+
    "\2\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\14\10\1\u020c\5\10\16\0\5\10\1\0"+
    "\2\10\1\0\10\10\1\u020d\1\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\u020e\6\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\1\10\1\u020f"+
    "\10\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\4\10\1\u0210\15\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\1\u0211\21\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\u0212\21\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\1\u0213\21\10\16\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\u0214\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\1\u0215\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u0216\4\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\7\10\1\u0217\2\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\10\10\1\u0218"+
    "\1\10\5\0\1\10\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\3\0\3\10\1\u0219\16\10\16\0\5\10\1\0"+
    "\2\10\1\0\3\10\1\u021a\6\10\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\3\10\1\u021b\6\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\2\10\1\u021c\17\10\16\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u021d\3\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\1\u021e\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\u021f\2\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\u0220\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\11\10\1\u0221\5\0\1\10\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\u0222\3\10\5\0\1\10\2\0\1\10\3\0"+
    "\22\10\16\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\3\0\1\u0223\21\10\16\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u0224\3\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\6\10\1\u0225\3\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\u0226\2\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\u0227\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\u0228\6\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\6\10\1\u0229\3\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\u022a\3\10\5\0\1\10\2\0\1\10\3\0\22\10"+
    "\16\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\3\0\10\10\1\u022b\11\10\16\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\u022c\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\12\10\1\u022d\7\10"+
    "\16\0\5\10\1\0\2\10\1\0\7\10\1\u022e\2\10"+
    "\5\0\1\10\2\0\1\10\3\0\22\10\16\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\u022f\2\10\5\0\1\10"+
    "\2\0\1\10\3\0\22\10\16\0\5\10\1\0\2\10"+
    "\1\0\1\10\1\u0230\10\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\u0231\21\10\16\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\u0232\2\0"+
    "\1\10\3\0\22\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\u0233\2\0\1\10\3\0\22\10\16\0"+
    "\5\10\1\0\2\10\1\0\10\10\1\u0234\1\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\1\u0235\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\3\0\22\10\16\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\3\0\1\u0236\21\10\16\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u0237\6\10\5\0"+
    "\1\10\2\0\1\10\3\0\22\10\16\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\3\0"+
    "\12\10\1\u0238\7\10\16\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\3\0\1\u0239\21\10"+
    "\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28161];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\7\1\1\11\11\1\1\11"+
    "\1\1\2\11\3\1\3\11\6\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\1\1\0\32\1\6\11\17\1"+
    "\4\11\2\0\1\1\1\0\1\11\1\0\56\1\1\11"+
    "\2\1\1\0\71\1\1\0\71\1\1\11\u0121\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[569];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 147: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 148: break;
          case 3: 
            { return FORWARD_SLASH;
            } 
            // fall through
          case 149: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 150: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 151: break;
          case 6: 
            { return INT_LITERAL;
            } 
            // fall through
          case 152: break;
          case 7: 
            { return IDENT;
            } 
            // fall through
          case 153: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 154: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 155: break;
          case 10: 
            { return UNDERSCORE;
            } 
            // fall through
          case 156: break;
          case 11: 
            { return BRACKET_LEFT;
            } 
            // fall through
          case 157: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 158: break;
          case 13: 
            { return BRACKET_RIGHT;
            } 
            // fall through
          case 159: break;
          case 14: 
            { return PAREN_LEFT;
            } 
            // fall through
          case 160: break;
          case 15: 
            { return PAREN_RIGHT;
            } 
            // fall through
          case 161: break;
          case 16: 
            { return LESS_THAN;
            } 
            // fall through
          case 162: break;
          case 17: 
            { return GREATER_THAN;
            } 
            // fall through
          case 163: break;
          case 18: 
            { return BRACE_LEFT;
            } 
            // fall through
          case 164: break;
          case 19: 
            { return BRACE_RIGHT;
            } 
            // fall through
          case 165: break;
          case 20: 
            { return SEMICOLON;
            } 
            // fall through
          case 166: break;
          case 21: 
            { return COLON;
            } 
            // fall through
          case 167: break;
          case 22: 
            { return BANG;
            } 
            // fall through
          case 168: break;
          case 23: 
            { return TILDE;
            } 
            // fall through
          case 169: break;
          case 24: 
            { return AND;
            } 
            // fall through
          case 170: break;
          case 25: 
            { return MODULO;
            } 
            // fall through
          case 171: break;
          case 26: 
            { return OR;
            } 
            // fall through
          case 172: break;
          case 27: 
            { return XOR;
            } 
            // fall through
          case 173: break;
          case 28: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 174: break;
          case 29: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 175: break;
          case 30: 
            { return ENABLE;
            } 
            // fall through
          case 176: break;
          case 31: 
            { return UINT_LITERAL;
            } 
            // fall through
          case 177: break;
          case 32: 
            { return DECIMAL_FLOAT_LITERAL;
            } 
            // fall through
          case 178: break;
          case 33: 
            { return FN;
            } 
            // fall through
          case 179: break;
          case 34: 
            { return ATTR_LEFT;
            } 
            // fall through
          case 180: break;
          case 35: 
            { return ATTR_RIGHT;
            } 
            // fall through
          case 181: break;
          case 36: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 182: break;
          case 37: 
            { return LESS_THAN_EQUAL;
            } 
            // fall through
          case 183: break;
          case 38: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 184: break;
          case 39: 
            { return GREATER_THAN_EQUAL;
            } 
            // fall through
          case 185: break;
          case 40: 
            { return IF;
            } 
            // fall through
          case 186: break;
          case 41: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 187: break;
          case 42: 
            { return AND_AND;
            } 
            // fall through
          case 188: break;
          case 43: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 189: break;
          case 44: 
            { return OR_OR;
            } 
            // fall through
          case 190: break;
          case 45: 
            { return FOR;
            } 
            // fall through
          case 191: break;
          case 46: 
            { return LET;
            } 
            // fall through
          case 192: break;
          case 47: 
            { return VAR;
            } 
            // fall through
          case 193: break;
          case 48: 
            { return HEX_FLOAT_LITERAL;
            } 
            // fall through
          case 194: break;
          case 49: 
            { return ELSE;
            } 
            // fall through
          case 195: break;
          case 50: 
            { return TRUE;
            } 
            // fall through
          case 196: break;
          case 51: 
            { return TYPE;
            } 
            // fall through
          case 197: break;
          case 52: 
            { return READ;
            } 
            // fall through
          case 198: break;
          case 53: 
            { return LOOP;
            } 
            // fall through
          case 199: break;
          case 54: 
            { return CASE;
            } 
            // fall through
          case 200: break;
          case 55: 
            { return VEC2;
            } 
            // fall through
          case 201: break;
          case 56: 
            { return VEC3;
            } 
            // fall through
          case 202: break;
          case 57: 
            { return VEC4;
            } 
            // fall through
          case 203: break;
          case 58: 
            { return BOOL;
            } 
            // fall through
          case 204: break;
          case 59: 
            { return EQUAL;
            } 
            // fall through
          case 205: break;
          case 60: 
            { return FALSE;
            } 
            // fall through
          case 206: break;
          case 61: 
            { return ARRAY;
            } 
            // fall through
          case 207: break;
          case 62: 
            { return ARROW;
            } 
            // fall through
          case 208: break;
          case 63: 
            { return WRITE;
            } 
            // fall through
          case 209: break;
          case 64: 
            { return INT32;
            } 
            // fall through
          case 210: break;
          case 65: 
            { return BREAK;
            } 
            // fall through
          case 211: break;
          case 66: 
            { return UINT32;
            } 
            // fall through
          case 212: break;
          case 67: 
            { return RETURN;
            } 
            // fall through
          case 213: break;
          case 68: 
            { return R8UINT;
            } 
            // fall through
          case 214: break;
          case 69: 
            { return R8SINT;
            } 
            // fall through
          case 215: break;
          case 70: 
            { return ATOMIC;
            } 
            // fall through
          case 216: break;
          case 71: 
            { return STRUCT;
            } 
            // fall through
          case 217: break;
          case 72: 
            { return SWITCH;
            } 
            // fall through
          case 218: break;
          case 73: 
            { return MAT2X2;
            } 
            // fall through
          case 219: break;
          case 74: 
            { return MAT2X3;
            } 
            // fall through
          case 220: break;
          case 75: 
            { return MAT2X4;
            } 
            // fall through
          case 221: break;
          case 76: 
            { return MAT3X2;
            } 
            // fall through
          case 222: break;
          case 77: 
            { return MAT3X3;
            } 
            // fall through
          case 223: break;
          case 78: 
            { return MAT3X4;
            } 
            // fall through
          case 224: break;
          case 79: 
            { return MAT4X2;
            } 
            // fall through
          case 225: break;
          case 80: 
            { return MAT4X3;
            } 
            // fall through
          case 226: break;
          case 81: 
            { return MAT4X4;
            } 
            // fall through
          case 227: break;
          case 82: 
            { return UNIFORM;
            } 
            // fall through
          case 228: break;
          case 83: 
            { return FLOAT32;
            } 
            // fall through
          case 229: break;
          case 84: 
            { return PRIVATE;
            } 
            // fall through
          case 230: break;
          case 85: 
            { return POINTER;
            } 
            // fall through
          case 231: break;
          case 86: 
            { return RG8UINT;
            } 
            // fall through
          case 232: break;
          case 87: 
            { return RG8SINT;
            } 
            // fall through
          case 233: break;
          case 88: 
            { return R16UINT;
            } 
            // fall through
          case 234: break;
          case 89: 
            { return R16SINT;
            } 
            // fall through
          case 235: break;
          case 90: 
            { return R32UINT;
            } 
            // fall through
          case 236: break;
          case 91: 
            { return R32SINT;
            } 
            // fall through
          case 237: break;
          case 92: 
            { return R8UNORM;
            } 
            // fall through
          case 238: break;
          case 93: 
            { return R8SNORM;
            } 
            // fall through
          case 239: break;
          case 94: 
            { return STORAGE;
            } 
            // fall through
          case 240: break;
          case 95: 
            { return SAMPLER;
            } 
            // fall through
          case 241: break;
          case 96: 
            { return DEFAULT;
            } 
            // fall through
          case 242: break;
          case 97: 
            { return DISCARD;
            } 
            // fall through
          case 243: break;
          case 98: 
            { return BITCAST;
            } 
            // fall through
          case 244: break;
          case 99: 
            { return FUNCTION;
            } 
            // fall through
          case 245: break;
          case 100: 
            { return RG16UINT;
            } 
            // fall through
          case 246: break;
          case 101: 
            { return RG16SINT;
            } 
            // fall through
          case 247: break;
          case 102: 
            { return RG32UINT;
            } 
            // fall through
          case 248: break;
          case 103: 
            { return RG32SINT;
            } 
            // fall through
          case 249: break;
          case 104: 
            { return RG8UNORM;
            } 
            // fall through
          case 250: break;
          case 105: 
            { return RG8SNORM;
            } 
            // fall through
          case 251: break;
          case 106: 
            { return R16FLOAT;
            } 
            // fall through
          case 252: break;
          case 107: 
            { return R32FLOAT;
            } 
            // fall through
          case 253: break;
          case 108: 
            { return CONTINUE;
            } 
            // fall through
          case 254: break;
          case 109: 
            { return RG16FLOAT;
            } 
            // fall through
          case 255: break;
          case 110: 
            { return RG32FLOAT;
            } 
            // fall through
          case 256: break;
          case 111: 
            { return RGBA8UINT;
            } 
            // fall through
          case 257: break;
          case 112: 
            { return RGBA8SINT;
            } 
            // fall through
          case 258: break;
          case 113: 
            { return WORKGROUP;
            } 
            // fall through
          case 259: break;
          case 114: 
            { return TEXTURE_1D;
            } 
            // fall through
          case 260: break;
          case 115: 
            { return TEXTURE_2D;
            } 
            // fall through
          case 261: break;
          case 116: 
            { return TEXTURE_3D;
            } 
            // fall through
          case 262: break;
          case 117: 
            { return READ_WRITE;
            } 
            // fall through
          case 263: break;
          case 118: 
            { return RGBA16UINT;
            } 
            // fall through
          case 264: break;
          case 119: 
            { return RGBA16SINT;
            } 
            // fall through
          case 265: break;
          case 120: 
            { return RGBA32UINT;
            } 
            // fall through
          case 266: break;
          case 121: 
            { return RGBA32SINT;
            } 
            // fall through
          case 267: break;
          case 122: 
            { return RGBA8UNORM;
            } 
            // fall through
          case 268: break;
          case 123: 
            { return RGBA8SNORM;
            } 
            // fall through
          case 269: break;
          case 124: 
            { return CONTINUING;
            } 
            // fall through
          case 270: break;
          case 125: 
            { return BGRA8UNORM;
            } 
            // fall through
          case 271: break;
          case 126: 
            { return FALLTHROUGH;
            } 
            // fall through
          case 272: break;
          case 127: 
            { return RGBA16FLOAT;
            } 
            // fall through
          case 273: break;
          case 128: 
            { return RGBA32FLOAT;
            } 
            // fall through
          case 274: break;
          case 129: 
            { return TEXTURE_CUBE;
            } 
            // fall through
          case 275: break;
          case 130: 
            { return RG11B10FLOAT;
            } 
            // fall through
          case 276: break;
          case 131: 
            { return RGB10A2UNORM;
            } 
            // fall through
          case 277: break;
          case 132: 
            { return RGBA8UNORM_SRGB;
            } 
            // fall through
          case 278: break;
          case 133: 
            { return BGRA8UNORM_SRGB;
            } 
            // fall through
          case 279: break;
          case 134: 
            { return TEXTURE_DEPTH_2D;
            } 
            // fall through
          case 280: break;
          case 135: 
            { return TEXTURE_2D_ARRAY;
            } 
            // fall through
          case 281: break;
          case 136: 
            { return TEXTURE_STORAGE_1D;
            } 
            // fall through
          case 282: break;
          case 137: 
            { return TEXTURE_STORAGE_2D;
            } 
            // fall through
          case 283: break;
          case 138: 
            { return TEXTURE_STORAGE_3D;
            } 
            // fall through
          case 284: break;
          case 139: 
            { return TEXTURE_CUBE_ARRAY;
            } 
            // fall through
          case 285: break;
          case 140: 
            { return TEXTURE_DEPTH_CUBE;
            } 
            // fall through
          case 286: break;
          case 141: 
            { return SAMPLER_COMPARISON;
            } 
            // fall through
          case 287: break;
          case 142: 
            { return TEXTURE_DEPTH_2D_ARRAY;
            } 
            // fall through
          case 288: break;
          case 143: 
            { return TEXTURE_MULTISAMPLED_2D;
            } 
            // fall through
          case 289: break;
          case 144: 
            { return TEXTURE_STORAGE_2D_ARRAY;
            } 
            // fall through
          case 290: break;
          case 145: 
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            } 
            // fall through
          case 291: break;
          case 146: 
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            } 
            // fall through
          case 292: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
