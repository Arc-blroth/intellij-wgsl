/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package wgslplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static wgslplugin.language.psi.WGSLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>WGSLLexer.flex</tt>
 */
public class _WgslLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\1\1\3\22\0\1\1\1\67\3\0\1\72\1\71\1\0\1\34\1\35\1\4\1\16\1"+
    "\32\1\5\1\13\1\2\1\6\1\57\1\61\1\62\1\65\5\11\1\66\1\44\1\37\1\64\1\40\1\0"+
    "\1\45\4\10\1\15\1\10\11\23\1\21\12\23\1\31\1\0\1\33\1\74\1\22\1\0\1\26\1\63"+
    "\1\41\1\60\1\14\1\17\1\54\1\56\1\47\1\23\1\53\1\27\1\55\1\46\1\50\1\20\1\23"+
    "\1\25\1\30\1\24\1\12\1\51\1\52\1\7\1\36\1\23\1\42\1\73\1\43\1\70\6\0\1\1\32"+
    "\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\7\1\10\1\7\1\11\2\7\1\12\5\7"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\7"+
    "\1\22\1\23\1\24\1\25\6\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\0\1\6\1\0\1\41\2\0\1\42\1\43\1\0"+
    "\4\7\1\44\2\7\1\45\20\7\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\7\1\54\12\7\1\55\1\56"+
    "\1\57\1\60\1\37\1\61\1\0\1\6\1\0\1\43"+
    "\1\0\1\43\1\7\1\62\4\7\1\63\1\64\1\7"+
    "\1\65\7\7\1\66\7\7\1\67\1\7\1\70\7\7"+
    "\2\0\1\6\1\71\1\0\1\7\1\72\7\7\1\73"+
    "\1\74\3\7\1\75\4\7\1\76\1\7\1\77\1\100"+
    "\1\101\10\7\1\102\1\37\1\61\1\0\1\71\4\7"+
    "\1\103\5\7\1\104\13\7\1\105\1\7\1\71\1\7"+
    "\1\106\5\7\1\107\1\110\1\111\2\7\1\112\2\7"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\3\7\1\124\3\7\1\125\1\7\1\126\1\127"+
    "\2\7\1\130\1\131\1\132\1\133\4\7\1\134\15\7"+
    "\1\135\5\7\1\136\1\7\1\137\1\140\1\7\1\141"+
    "\1\142\11\7\1\143\4\7\1\144\31\7\1\145\1\146"+
    "\12\7\1\147\1\150\1\151\1\152\1\7\1\153\2\7"+
    "\1\154\23\7\1\155\1\7\1\156\2\7\1\157\1\160"+
    "\5\7\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u016e"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\75\0\u04c4"+
    "\0\75\0\75\0\u0501\0\u053e\0\u057b\0\75\0\75\0\75"+
    "\0\75\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\75\0\u0763\0\75\0\u07a0\0\75\0\u07dd\0\75\0\u081a"+
    "\0\u0857\0\75\0\u0894\0\u08d1\0\u0225\0\75\0\u090e\0\u094b"+
    "\0\75\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\75"+
    "\0\u0af6\0\u0b33\0\u016e\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0f40\0\u0f7d\0\u016e\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\75\0\75"+
    "\0\75\0\75\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\75"+
    "\0\u134d\0\u138a\0\u13c7\0\u016e\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u016e\0\u016e\0\u14f8\0\u016e\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u016e\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u016e\0\u188b\0\u016e\0\u18c8\0\u1905"+
    "\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed"+
    "\0\u1b2a\0\u1b67\0\u1ba4\0\u016e\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u016e\0\u016e\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u016e\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u016e\0\u1f37\0\u016e"+
    "\0\u016e\0\u016e\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u016e\0\75\0\75\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u016e\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u016e\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u016e\0\u269a\0\75"+
    "\0\u26d7\0\u016e\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u016e"+
    "\0\u016e\0\u016e\0\u2845\0\u2882\0\u016e\0\u28bf\0\u28fc\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e\0\u016e"+
    "\0\u2939\0\u2976\0\u29b3\0\u016e\0\u29f0\0\u2a2d\0\u2a6a\0\u016e"+
    "\0\u2aa7\0\u016e\0\u2ae4\0\u2b21\0\u2b5e\0\u016e\0\u016e\0\u016e"+
    "\0\u016e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u016e\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\u016e\0\u2fa8\0\u2fe5\0\u3022\0\u305f"+
    "\0\u309c\0\u016e\0\u30d9\0\u3116\0\u016e\0\u3153\0\u016e\0\u016e"+
    "\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe\0\u333b"+
    "\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u016e\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u370b\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6"+
    "\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e"+
    "\0\u3adb\0\u016e\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u016e\0\u3d7a\0\u016e\0\u016e"+
    "\0\u3db7\0\u3df4\0\u3e31\0\u3e6e\0\u016e\0\u3eab\0\u3ee8\0\u3f25"+
    "\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d"+
    "\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u016e\0\u4332\0\u016e\0\u436f\0\u43ac\0\u016e\0\u016e\0\u43e9"+
    "\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\10\1\15\1\16\1\17"+
    "\1\10\1\20\1\10\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\10\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\10\1\42\1\10"+
    "\1\43\1\44\2\10\1\45\1\10\1\11\1\46\2\11"+
    "\1\47\1\50\1\11\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\76\0\1\3\1\0\1\3\73\0\1\60"+
    "\1\0\1\61\75\0\1\62\1\63\2\0\1\64\1\0"+
    "\1\65\24\0\1\66\16\0\1\64\1\0\2\64\2\0"+
    "\1\64\15\0\1\67\1\70\1\0\1\67\1\71\1\72"+
    "\2\73\41\0\1\67\1\0\2\67\2\0\1\67\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\1\11\2\0"+
    "\1\11\1\71\1\72\2\73\41\0\1\11\1\0\2\11"+
    "\2\0\1\11\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\1\74\13\10\1\75"+
    "\1\10\1\0\1\10\15\0\1\72\2\0\1\72\45\0"+
    "\1\72\1\0\2\72\2\0\1\72\15\0\5\10\1\0"+
    "\2\10\1\0\10\10\1\76\1\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\77\15\10\1\0\1\10\25\0\1\100"+
    "\64\0\4\10\1\101\1\0\2\10\1\0\7\10\1\102"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\1\103\1\10"+
    "\1\104\11\10\1\105\1\10\1\0\1\10\15\0\4\10"+
    "\1\106\1\0\2\10\1\0\5\10\1\107\1\110\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\111\1\10\1\0\6\10\1\112"+
    "\3\10\5\0\1\113\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\1\114\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\5\10\1\115\1\116"+
    "\3\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\1\117\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\120\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\121\1\10\1\122\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\4\10\1\123\11\10\1\0\1\10\40\0\1\124"+
    "\76\0\1\125\100\0\1\126\24\0\1\127\50\0\1\130"+
    "\23\0\1\131\16\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\132\2\10\5\0\1\10\2\0\1\10\4\0\2\10"+
    "\1\133\13\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\1\134\11\10\5\0\1\10\2\0\1\10\4\0"+
    "\14\10\1\135\1\10\1\0\1\10\15\0\5\10\1\0"+
    "\1\136\1\10\1\0\7\10\1\137\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\2\10\1\140\13\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\141\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\142\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\143\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\144\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\10\1\145\1\146\13\10"+
    "\1\0\1\10\73\0\1\147\74\0\1\150\101\0\1\151"+
    "\76\0\1\152\1\0\3\60\1\0\71\60\4\153\1\154"+
    "\70\153\6\0\1\67\1\155\1\0\1\67\1\0\1\72"+
    "\2\73\41\0\1\67\1\0\2\67\2\0\1\67\15\0"+
    "\1\64\2\0\1\64\1\0\1\72\2\73\41\0\1\64"+
    "\1\0\2\64\2\0\1\64\15\0\1\67\2\0\1\67"+
    "\1\0\1\72\2\73\41\0\1\67\1\0\2\67\2\0"+
    "\1\67\15\0\1\156\1\0\2\156\1\0\1\157\2\156"+
    "\1\0\1\156\6\0\1\156\12\0\1\156\15\0\5\156"+
    "\1\0\1\156\15\0\1\72\2\0\1\72\2\0\2\73"+
    "\1\0\1\160\37\0\1\72\1\0\2\72\2\0\1\72"+
    "\14\0\1\161\1\162\2\0\1\162\4\0\1\161\40\0"+
    "\1\162\1\0\2\162\2\0\1\162\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\10\1\163\14\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\13\10\1\164\2\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\11\10\1\165\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\166\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\1\167"+
    "\15\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\10\10\1\170\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\171\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\13\10\1\172"+
    "\2\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\11\10\1\173\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\174\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\1\10\1\175\14\10"+
    "\1\0\1\10\15\0\1\10\1\176\3\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\4\10\1\177\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\1\10\1\200"+
    "\10\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\5\10\1\201"+
    "\4\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\2\10\1\202\13\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\6\10\1\203"+
    "\3\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\5\10\1\204"+
    "\4\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\2\10\1\205\13\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\6\10\1\206"+
    "\3\10\5\0\1\10\2\0\1\10\4\0\2\10\1\207"+
    "\13\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\7\10\1\210"+
    "\6\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\1\10\1\211"+
    "\14\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\11\10\1\212\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\1\213\15\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\13\10\1\214\2\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\215\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\216\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\217\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\220\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\1\221\11\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\11\10\1\222\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\1\223\1\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\5\10\1\224\4\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\2\10"+
    "\1\225\13\10\1\0\1\10\7\0\4\153\1\226\70\153"+
    "\4\154\1\227\70\154\6\0\1\230\1\0\2\230\1\0"+
    "\1\157\2\230\1\0\1\230\6\0\1\230\12\0\1\230"+
    "\15\0\5\230\1\0\1\230\15\0\1\156\1\0\2\156"+
    "\1\71\1\231\2\156\1\0\1\156\2\232\4\0\1\156"+
    "\12\0\1\156\15\0\5\156\1\0\1\156\15\0\1\231"+
    "\1\0\2\231\2\0\2\231\1\0\1\231\6\0\1\231"+
    "\12\0\1\231\15\0\5\231\1\0\1\231\15\0\1\162"+
    "\2\0\1\162\45\0\1\162\1\0\2\162\2\0\1\162"+
    "\15\0\1\162\2\0\1\162\5\0\1\160\37\0\1\162"+
    "\1\0\2\162\2\0\1\162\15\0\5\10\1\0\2\10"+
    "\1\0\1\233\11\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\1\234\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\15\10\1\235\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\236\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\10\10\1\237\1\240\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\10\10\1\241\5\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\3\10\1\242\12\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\243\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\1\244\1\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\245\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\4\10\1\246"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\7\10"+
    "\1\247\6\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\250\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\1\10\1\251\10\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\4\10\1\252\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\253\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\1\10\1\254\10\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\255\4\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\1\256\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\257\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\13\10\1\260\1\261"+
    "\1\10\1\0\1\262\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\5\10\1\263"+
    "\10\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\13\10\1\264"+
    "\1\265\1\10\1\0\1\266\15\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\267\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\270\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\271\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\272\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\10\10\1\273\1\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\7\0\2\153\1\274\1\153\1\226\70\153\2\154\1\275"+
    "\1\154\1\227\70\154\6\0\1\230\1\0\2\230\1\0"+
    "\1\231\2\230\1\0\1\230\2\232\4\0\1\230\12\0"+
    "\1\230\15\0\5\230\1\0\1\230\15\0\1\231\1\0"+
    "\2\231\2\0\2\231\1\0\1\231\2\232\4\0\1\231"+
    "\12\0\1\231\15\0\5\231\1\0\1\231\14\0\1\276"+
    "\1\277\2\0\1\277\4\0\1\276\40\0\1\277\1\0"+
    "\2\277\2\0\1\277\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\2\10\1\300"+
    "\13\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\10\10\1\301\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\302\4\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\5\10\1\303\4\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\1\304\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\3\10"+
    "\1\305\6\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\306\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\4\10\1\307\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\6\10\1\310"+
    "\3\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\10\1\311\14\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\312\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\313\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\7\10\1\314\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\10\10\1\315\1\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\316\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\1\10\1\317"+
    "\14\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\6\10\1\320"+
    "\7\10\1\0\1\10\15\0\1\10\1\321\3\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\1\10\1\322\3\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\1\10\1\323\3\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\4\10\1\324\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\325\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\5\10\1\326\10\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\327\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\1\277\2\0\1\277\45\0\1\277"+
    "\1\0\2\277\2\0\1\277\15\0\1\277\2\0\1\277"+
    "\5\0\1\330\37\0\1\277\1\0\2\277\2\0\1\277"+
    "\15\0\5\10\1\0\2\10\1\0\6\10\1\331\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\332\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\333\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\10\10\1\334\5\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\335\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\336\4\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\337\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\340\15\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\341\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\5\10"+
    "\1\342\4\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\6\10\1\343\7\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\344\1\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\10\10\1\345\5\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\346\15\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\6\10\1\347\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\4\0\13\10\1\350\1\351\1\10\1\0"+
    "\1\352\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\13\10\1\353\1\354\1\10"+
    "\1\0\1\355\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\13\10\1\356\1\357"+
    "\1\10\1\0\1\360\15\0\5\10\1\0\2\10\1\0"+
    "\10\10\1\361\1\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\6\10\1\362\3\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\11\10\1\363\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\7\10\1\364\6\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\365\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\6\10"+
    "\1\366\3\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\367\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\370\1\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\1\371\1\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\372\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\373\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\4\10\1\374\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\2\10\1\375\13\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\376\4\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\12\10\1\377\3\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\5\10\1\u0100\4\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\u0101\15\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\2\10\1\u0102\13\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\u0103\15\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\u0104\6\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\u0105\6\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\1\u0106"+
    "\1\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\1\10\1\u0107\14\10\1\0\1\10\15\0\4\10\1\u0108"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\4\10\1\u0109\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\11\10\1\u010a\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\11\10"+
    "\1\u010b\5\0\1\10\2\0\1\u010c\4\0\7\10\1\u010d"+
    "\1\10\1\u010e\1\u010f\1\u0110\1\u0111\1\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\u0112\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\1\u0113\15\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\1\10\1\u0114\10\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\6\10\1\u0115\7\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u0116\4\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\5\10\1\u0117\4\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\4\10\1\u0118"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\4\10\1\u0119\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\12\10\1\u011a"+
    "\3\10\1\0\1\10\15\0\5\10\1\0\1\u011b\1\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\12\10\1\u011c\3\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\12\10\1\u011d\3\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\u011e\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\6\10\1\u011f\7\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\10\10\1\u0120\5\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\7\10"+
    "\1\u0121\2\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\2\10\1\u0122\13\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\15\10\1\u0123\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\10\10\1\u0124"+
    "\1\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\1\10\1\u0125"+
    "\10\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\3\10\1\u0126"+
    "\6\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\7\10\1\u0127\6\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\u0128\15\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\6\10\1\u0129\3\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\u012a\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u012b\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u012c\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u012d\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\1\10\1\u012e\10\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\5\10\1\u012f\4\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0130\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u0131\6\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\u0132\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\10\10\1\u0133\5\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u0134\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0135\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\6\10\1\u0136\7\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0137\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\11\10\1\u0138\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\u0139\6\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u013a\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u013b\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\1\u013c\1\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\6\10\1\u013d\3\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\7\10\1\u013e\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\u013f\4\0"+
    "\7\10\1\u0140\3\10\1\u0141\2\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0142\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\u0143\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u0144\6\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u0145\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\7\10\1\u0146\6\10\1\0\1\10\15\0"+
    "\4\10\1\u0147\1\0\2\10\1\0\12\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\4\10"+
    "\1\u0148\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\12\10\1\u0149\3\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\u014a\2\0\1\10\4\0"+
    "\16\10\1\0\1\10\15\0\5\10\1\0\2\10\1\0"+
    "\11\10\1\u014b\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\10\2\0\1\10\4\0\11\10\1\u014c\1\10"+
    "\1\u014d\1\u014e\1\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\7\10\1\u014f\2\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\1\10\1\u0150\10\10\5\0\1\10\2\0"+
    "\1\10\4\0\16\10\1\0\1\10\15\0\5\10\1\0"+
    "\2\10\1\0\12\10\5\0\1\10\2\0\1\10\4\0"+
    "\15\10\1\u0151\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\10\10\1\u0152\1\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\3\10\1\u0153\6\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\2\10"+
    "\1\u0154\13\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\12\10"+
    "\1\u0155\3\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\12\10"+
    "\1\u0156\3\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\12\10"+
    "\1\u0157\3\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\u0158\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\10\10"+
    "\1\u0159\1\10\5\0\1\10\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\1\u015a\1\10\1\0"+
    "\12\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\5\10\1\u015b"+
    "\4\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\7\10\1\u015c"+
    "\2\10\5\0\1\10\2\0\1\10\4\0\16\10\1\0"+
    "\1\10\15\0\5\10\1\0\2\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\1\u015d\15\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\3\10\1\u015e\6\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\u015f\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u0160\6\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\1\10\1\u0161\14\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\6\10\1\u0162\3\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0163\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\12\10\1\u0164\3\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\7\10\1\u0165\2\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\11\10\1\u0166\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u0167\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u0168\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\3\10\1\u0169\6\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u016a\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\u016b\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\7\10\1\u016c\2\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u016d\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\13\10\1\u016e\2\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\6\10\1\u016f\3\10\5\0\1\10"+
    "\2\0\1\10\4\0\16\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\10\2\0\1\10"+
    "\4\0\7\10\1\u0170\6\10\1\0\1\10\15\0\5\10"+
    "\1\0\2\10\1\0\12\10\5\0\1\u0171\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u0172\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\10\2\0\1\10\4\0\12\10"+
    "\1\u0173\3\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\7\10\1\u0174\2\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\1\10\1\u0175\10\10\5\0\1\10\2\0\1\10"+
    "\4\0\16\10\1\0\1\10\15\0\5\10\1\0\2\10"+
    "\1\0\12\10\5\0\1\u0176\2\0\1\10\4\0\16\10"+
    "\1\0\1\10\15\0\5\10\1\0\2\10\1\0\12\10"+
    "\5\0\1\u0177\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\2\10\1\0\10\10\1\u0178\1\10"+
    "\5\0\1\10\2\0\1\10\4\0\16\10\1\0\1\10"+
    "\15\0\5\10\1\0\1\u0179\1\10\1\0\12\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\12\10\1\u017a\3\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\3\10\1\u017b\6\10\5\0"+
    "\1\10\2\0\1\10\4\0\16\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\13\10\1\u017c\2\10\1\0\1\10\15\0"+
    "\5\10\1\0\2\10\1\0\12\10\5\0\1\10\2\0"+
    "\1\10\4\0\12\10\1\u017d\3\10\1\0\1\10\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17690];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\1\11\1\1\2\11"+
    "\3\1\4\11\7\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\0\1\1\1\0\1\11"+
    "\2\0\1\11\1\1\1\0\4\1\1\11\23\1\6\11"+
    "\15\1\4\11\2\1\1\0\1\1\1\0\1\11\1\0"+
    "\44\1\2\0\2\1\1\0\41\1\2\11\1\0\31\1"+
    "\1\11\245\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WgslLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WgslLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 114: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 115: break;
          case 3: 
            { return FORWARD_SLASH;
            } 
            // fall through
          case 116: break;
          case 4: 
            { return STAR;
            } 
            // fall through
          case 117: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 118: break;
          case 6: 
            { return INT_LITERAL;
            } 
            // fall through
          case 119: break;
          case 7: 
            { return IDENT;
            } 
            // fall through
          case 120: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 121: break;
          case 9: 
            { return PLUS;
            } 
            // fall through
          case 122: break;
          case 10: 
            { return UNDERSCORE;
            } 
            // fall through
          case 123: break;
          case 11: 
            { return BRACKET_LEFT;
            } 
            // fall through
          case 124: break;
          case 12: 
            { return COMMA;
            } 
            // fall through
          case 125: break;
          case 13: 
            { return BRACKET_RIGHT;
            } 
            // fall through
          case 126: break;
          case 14: 
            { return PAREN_LEFT;
            } 
            // fall through
          case 127: break;
          case 15: 
            { return PAREN_RIGHT;
            } 
            // fall through
          case 128: break;
          case 16: 
            { return LESS_THAN;
            } 
            // fall through
          case 129: break;
          case 17: 
            { return GREATER_THAN;
            } 
            // fall through
          case 130: break;
          case 18: 
            { return BRACE_LEFT;
            } 
            // fall through
          case 131: break;
          case 19: 
            { return BRACE_RIGHT;
            } 
            // fall through
          case 132: break;
          case 20: 
            { return SEMICOLON;
            } 
            // fall through
          case 133: break;
          case 21: 
            { return AT;
            } 
            // fall through
          case 134: break;
          case 22: 
            { return EQUAL;
            } 
            // fall through
          case 135: break;
          case 23: 
            { return COLON;
            } 
            // fall through
          case 136: break;
          case 24: 
            { return BANG;
            } 
            // fall through
          case 137: break;
          case 25: 
            { return TILDE;
            } 
            // fall through
          case 138: break;
          case 26: 
            { return AND;
            } 
            // fall through
          case 139: break;
          case 27: 
            { return MODULO;
            } 
            // fall through
          case 140: break;
          case 28: 
            { return OR;
            } 
            // fall through
          case 141: break;
          case 29: 
            { return XOR;
            } 
            // fall through
          case 142: break;
          case 30: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 143: break;
          case 31: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 144: break;
          case 32: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 145: break;
          case 33: 
            { return ARROW;
            } 
            // fall through
          case 146: break;
          case 34: 
            { return UINT_LITERAL;
            } 
            // fall through
          case 147: break;
          case 35: 
            { return DECIMAL_FLOAT_LITERAL;
            } 
            // fall through
          case 148: break;
          case 36: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 149: break;
          case 37: 
            { return FN;
            } 
            // fall through
          case 150: break;
          case 38: 
            { return ATTR_LEFT;
            } 
            // fall through
          case 151: break;
          case 39: 
            { return ATTR_RIGHT;
            } 
            // fall through
          case 152: break;
          case 40: 
            { return SHIFT_LEFT;
            } 
            // fall through
          case 153: break;
          case 41: 
            { return LESS_THAN_EQUAL;
            } 
            // fall through
          case 154: break;
          case 42: 
            { return SHIFT_RIGHT;
            } 
            // fall through
          case 155: break;
          case 43: 
            { return GREATER_THAN_EQUAL;
            } 
            // fall through
          case 156: break;
          case 44: 
            { return IF;
            } 
            // fall through
          case 157: break;
          case 45: 
            { return EQUAL_EQUAL;
            } 
            // fall through
          case 158: break;
          case 46: 
            { return NOT_EQUAL;
            } 
            // fall through
          case 159: break;
          case 47: 
            { return AND_AND;
            } 
            // fall through
          case 160: break;
          case 48: 
            { return OR_OR;
            } 
            // fall through
          case 161: break;
          case 49: 
            { return DOC_COMMENT;
            } 
            // fall through
          case 162: break;
          case 50: 
            { return UINT32;
            } 
            // fall through
          case 163: break;
          case 51: 
            { return FOR;
            } 
            // fall through
          case 164: break;
          case 52: 
            { return FLOAT32;
            } 
            // fall through
          case 165: break;
          case 53: 
            { return POINTER;
            } 
            // fall through
          case 166: break;
          case 54: 
            { return LET;
            } 
            // fall through
          case 167: break;
          case 55: 
            { return INT32;
            } 
            // fall through
          case 168: break;
          case 56: 
            { return VAR;
            } 
            // fall through
          case 169: break;
          case 57: 
            { return HEX_FLOAT_LITERAL;
            } 
            // fall through
          case 170: break;
          case 58: 
            { return ELSE;
            } 
            // fall through
          case 171: break;
          case 59: 
            { return TRUE;
            } 
            // fall through
          case 172: break;
          case 60: 
            { return TYPE;
            } 
            // fall through
          case 173: break;
          case 61: 
            { return LOOP;
            } 
            // fall through
          case 174: break;
          case 62: 
            { return CASE;
            } 
            // fall through
          case 175: break;
          case 63: 
            { return VEC2;
            } 
            // fall through
          case 176: break;
          case 64: 
            { return VEC3;
            } 
            // fall through
          case 177: break;
          case 65: 
            { return VEC4;
            } 
            // fall through
          case 178: break;
          case 66: 
            { return BOOL;
            } 
            // fall through
          case 179: break;
          case 67: 
            { return FALSE;
            } 
            // fall through
          case 180: break;
          case 68: 
            { return ARRAY;
            } 
            // fall through
          case 181: break;
          case 69: 
            { return BREAK;
            } 
            // fall through
          case 182: break;
          case 70: 
            { return ENABLE;
            } 
            // fall through
          case 183: break;
          case 71: 
            { return RETURN;
            } 
            // fall through
          case 184: break;
          case 72: 
            { return ATOMIC;
            } 
            // fall through
          case 185: break;
          case 73: 
            { return STRUCT;
            } 
            // fall through
          case 186: break;
          case 74: 
            { return SWITCH;
            } 
            // fall through
          case 187: break;
          case 75: 
            { return MAT2X2;
            } 
            // fall through
          case 188: break;
          case 76: 
            { return MAT2X3;
            } 
            // fall through
          case 189: break;
          case 77: 
            { return MAT2X4;
            } 
            // fall through
          case 190: break;
          case 78: 
            { return MAT3X2;
            } 
            // fall through
          case 191: break;
          case 79: 
            { return MAT3X3;
            } 
            // fall through
          case 192: break;
          case 80: 
            { return MAT3X4;
            } 
            // fall through
          case 193: break;
          case 81: 
            { return MAT4X2;
            } 
            // fall through
          case 194: break;
          case 82: 
            { return MAT4X3;
            } 
            // fall through
          case 195: break;
          case 83: 
            { return MAT4X4;
            } 
            // fall through
          case 196: break;
          case 84: 
            { return UNIFORM;
            } 
            // fall through
          case 197: break;
          case 85: 
            { return PRIVATE;
            } 
            // fall through
          case 198: break;
          case 86: 
            { return STORAGE;
            } 
            // fall through
          case 199: break;
          case 87: 
            { return SAMPLER;
            } 
            // fall through
          case 200: break;
          case 88: 
            { return DEFAULT;
            } 
            // fall through
          case 201: break;
          case 89: 
            { return DISCARD;
            } 
            // fall through
          case 202: break;
          case 90: 
            { return BITCAST;
            } 
            // fall through
          case 203: break;
          case 91: 
            { return FUNCTION;
            } 
            // fall through
          case 204: break;
          case 92: 
            { return CONTINUE;
            } 
            // fall through
          case 205: break;
          case 93: 
            { return WORKGROUP;
            } 
            // fall through
          case 206: break;
          case 94: 
            { return TEXTURE_1D;
            } 
            // fall through
          case 207: break;
          case 95: 
            { return TEXTURE_2D;
            } 
            // fall through
          case 208: break;
          case 96: 
            { return TEXTURE_3D;
            } 
            // fall through
          case 209: break;
          case 97: 
            { return CONTINUING;
            } 
            // fall through
          case 210: break;
          case 98: 
            { return FALLTHROUGH;
            } 
            // fall through
          case 211: break;
          case 99: 
            { return TEXTURE_CUBE;
            } 
            // fall through
          case 212: break;
          case 100: 
            { return PUSH_CONSTANT;
            } 
            // fall through
          case 213: break;
          case 101: 
            { return TEXTURE_DEPTH_2D;
            } 
            // fall through
          case 214: break;
          case 102: 
            { return TEXTURE_2D_ARRAY;
            } 
            // fall through
          case 215: break;
          case 103: 
            { return TEXTURE_STORAGE_1D;
            } 
            // fall through
          case 216: break;
          case 104: 
            { return TEXTURE_STORAGE_2D;
            } 
            // fall through
          case 217: break;
          case 105: 
            { return TEXTURE_STORAGE_3D;
            } 
            // fall through
          case 218: break;
          case 106: 
            { return TEXTURE_CUBE_ARRAY;
            } 
            // fall through
          case 219: break;
          case 107: 
            { return TEXTURE_DEPTH_CUBE;
            } 
            // fall through
          case 220: break;
          case 108: 
            { return SAMPLER_COMPARISON;
            } 
            // fall through
          case 221: break;
          case 109: 
            { return TEXTURE_DEPTH_2D_ARRAY;
            } 
            // fall through
          case 222: break;
          case 110: 
            { return TEXTURE_MULTISAMPLED_2D;
            } 
            // fall through
          case 223: break;
          case 111: 
            { return TEXTURE_STORAGE_2D_ARRAY;
            } 
            // fall through
          case 224: break;
          case 112: 
            { return TEXTURE_DEPTH_CUBE_ARRAY;
            } 
            // fall through
          case 225: break;
          case 113: 
            { return TEXTURE_DEPTH_MULTISAMPLED_2D;
            } 
            // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
